.Dd July 23, 2022
.Dt SIMP 7
.Os
.Sh NAME
.Nm simp
.Nd simplistic programming language
.Sh DESCRIPTION
The
.Nm
programming language is a
minimalist (yet expressive),
statically scoped,
dynamically typed,
properly tail-recursive,
general-purpose
LISP-1 programming language.
All manipulable entities in
.Nm
are first-class objects.
Imperative, functional, and message-passing programming styles (to name a few)
may be conveniently expressed in the
.Nm
programming language.
.Ss S-expressions
.Nm
(like most dialects of Lisp)
employs a fully parenthesized prefix notation for programs and other data known as
.Em S-expression
(or "sexp" for short).
.Pp
However,
.Nm
is based on a variation of s-expressions that permits lists to be built not only by means of chained pairs,
but by chaining tuples of any size.
Tuples, in
.Nm
are implemented as vectors.
In fact, it is the vector, not the pair, the primary mean
of data combination.
A list is basically a chain of vectors,
in which the last element of each vector is a pointer to the next vector.
The vector chain goes on until a zero-element vector (also known as nil) is found, terminating the list.
.Ss Scope
An identifier may name a location in memory where a value can be stored.
Such identifier is called a
.Em variable
and is said to be
.Em bound
to that location.
The set of all visible bindings in effect at some point in a program is known as the
.Em environment
in effect at that point.
The value stored in the location to which a variable is bound is called the variable's
.Em value Ns .
By abuse of terminology, the variable is sometimes said to name the value or to be bound to the value.
This is not quite accurate, but confusion rarely results from this practice.
.Pp
.Nm
is a statically scoped language with block structure.
To each place where an identifier is bound in a program there corresponds a
.Em region
of the program text within which the binding is visible.
Every mention of an identifier refers to the binding of the identifier that established the innermost of the regions containing the use.
If there is no binding of the identifier whose region contains the use, then the use refers to the binding for the variable in the top level environment, if any.
If there is no binding for the identifier, it is said to be
.Em unbound Ns .
.Ss External representations
An important concept in
.Nm
(and Lisp)
is that of the
.Em external representation
of an object as a sequence of characters.
There are two forms of external representation:
the printed and the read forms.
.Pp
The
.Em printed external representation
of an object is unique;
and all objects have a printed external representation.
For example, the printed external representation of the integer 28 is the sequence of characters "28",
and the printed external representation of a list consisting of the integers 8 and 13 is the sequence of characters "(8 13)".
The printed external representation of an object is generated by the
.Ic write
procedure.
.Pp
The
.Em read external representation
of an object is not necessarily unique;
and certain objects may have no read external representation at all.
The integer 28 has the read external representations "28", "28e" and "0x1C", among others;
and the list in the previous paragraph also has the read external representations "(8 13)", " ( 08 13 ) ", "(8 . (13 . () .) .)", and "[8 [13 []]]", among others.
Boolean and port objects, for example, have no read external representation.
The read external representation of an object is parsed by the
.Ic read
procedure.
.Pp
In most cases, an object's printed external representation is also a valid read external representation for the object.
Objects that have no read external representations have their printed external representation surrounded by "#<" and ">".
For example, the printed external representation of the true boolean value is "#<true>".
.Ss Evaluation
.Em Evaluation
is the process of computing objects from other objects.
An object can evaluate to zero or more objects.
An object can even evaluate to itself (a so called self-evaluating object).
An evaluation can do more than just compute objects,
such as mutate an object or perform input/output;
such additional processes are called
.Em side effects Ns .
.Pp
Although objects are usually read and then evaluated, those are separate processes, and either can be performed alone.
Reading does not evaluate anything; it just converts an external representation of an object to the object itself.
For example, the sequence of characters "(+ 2 6)" is an external representation of an object that evaluates to the integer 8;
it is not however an external representation of the integer 8.
The syntax of
.Nm
has the property that any sequence of characters that is an expression is also the external representation of some object.
That can lead to confusion, since it may not be obvious out of context whether a given sequence of characters is intended to denote data or program,
but it is also a source of power, since it facilitates writing programs such as interpreters and compilers that treat programs as data (or vice versa).
.Pp
This manual uses the rightwards double arrow symbol "⇒" (U+21D2) to separate the external representation of an object from the external representation of the objects it evaluates to.
For example "(+ 2 6) ⇒ 8" means that the object represented by "(+ 2 6)" evaluates to the object represented by "8".
.Pp
This manual also uses the triple bar symbol "≡" (U+2261) to separate the external representations of two objects that evaluate to the same objects.
For example "(+ 2 6) ≡ (+ 4 4)" means
that the object represented by "(+ 2 6)" and the object represented by "(+ 4 4)" evaluate to the same thing.
.Pp
Evaluation is subject to the current environment (see the section
.Sx Scope
for more information on environments).
For example, a symbol evaluates to the value bound to a homonymous variable in the current environment.
.Pp
Evaluation is performed by the
.Ic eval
procedure.
.Ss Storage model
Objects such as vectors and bytevectors implictly denote locations or sequences of locations.
.Pp
An object can be immutable or mutable.
An
.Em immutable
object denotes a read-only location or sequence of locations;
the values stored in one of these locations cannot be modified after the object has been created.
.An
.Em mutable
object denotes a readable and writeable location or sequence of locations;
a new value may be stored into one of these locations using a destructive procedure involving side effects called
.Em mutator
(and the object is said to be "mutated").
A mutated object continues to denote the same locations as before.
In general, literal constants evaluate to immutable objects.
It is an error to attempt to store a new value into a location that is denotaed by an immutable object.
.Pp
Every location is marked to show whether it is in use.
No variable or object ever refers to a location that is not in use.
Whenever this manual speaks of storage being allocated for a variable or object,
what is meant is that an appropriate number of locations are chosen from the set of locations that are not in use,
and the chosen locations are marked to indicate that they are now in use before the variable or object is made to denote them.
.Pp
There are two means of comparing objects.
Two objects are the
.Em same
if they denote the same location.
Two objects are
.Em equivalent
if the values stored in their locations are the same.
There is also the notion of recursive equivalency,
in which two objects are recursively equivalent if the values stored in their locations are equivalent.
.Ss Proper tail recursion
[TODO]
.Sh PROGRAM STRUCTURE
A
.Nm
program is a sequence of characters forming whitespace, comments, or tokens.
The tokens in a program must form syntactically well formed expressions.
Some characters, known as "delimiters", have special meaning during the the program parsing,
because certain tokens require a delimiter to occur after them.
Delimiters include all space characters and a few other characters (see below).
See the section
.Sx FORMAL SYNTAX
below for a formal description of what is a program.
.Ss Whitespace and comments
Whitespace characters include the
space,
horizontal tab,
newline (line feed),
form feed,
carriage return, and
vertical tab.
.Pp
Whitespace is used for improved readability and as necessary to separate tokens from each other.
Whitespace can occur between any two tokens, but not within a token.
Whitespace occurring inside a string literal is significant.
.Pp
Comments are annotations in the source code and are treated exactly like whitespace.
.Pp
A hash character (#) outside a string literal indicates the start of a comment.
The comment continues to the end of the line on which the hash character appears.
.Ss Tokens
.Pp
The end-of-file character is the token that terminates a program.
The end-of-file character is also a delimiter.
(The end-of-file is actually not a character, but is interpreted as if it were.)
.Pp
The open and close parenthesis characters are tokens used to write lists.
The open and close square bracket characters are tokens used to write vectors.
Those characters are also delimiters.
.Pp
The dot character
.Sy \(dq.\(dq
is a token used inside list to inhibit the
creation of a new chained vector.
.Pp
A string literal is any sequence of characters enclosed within double quotation marks (").
The double quotation mark character itself is a delimiter.
A string literal is used to write strings (also known as bytevectors).
Within a string literal, sequences of characters beginning with a backslash (\e) represent bytes other than the characters themselves.
Most escape sequences represent a single byte,
but some forms may represent more than one byte.
An invalid escape sequence is equivalent to the character after the backslash;
for example, the string literal
.Sy \(dq\ej\(dq
does not contain a valid escape sequence, so it is equivalent to
.Sy \(dqj\(dq Ns .
The valid escape sequences are as follows:
.Bl -tag -width Ds -compact
.It Cm \ea
Alarm (U+0007).
.It Cm \eb
Backspace (U+0008).
.It Cm \et
Horizontal tab (U+0009).
.It Cm \en
Line feed (U+000A).
.It Cm \ev
Vertical tab (U+000B).
.It Cm \ef
Form feed (U+000C).
.It Cm \er
Carriage return (U+000D).
.It Cm \ee
Escape character (U+001B).
.It Cm \e"
Double quote (U+0022).
.It Cm \e\e
Backslash (U+005C).
.It Cm \e Ns Ar num
Byte whose value is the 1-, 2-, or 3-digit octal number
.Ar num Ns .
.It Cm \ex Ns Ar num
Byte whose value is the 1- or 2-digit hexadecimal number
.Ar num Ns .
.It Cm \eu Ns Ar num
Bytes encoding, in UTF-8, the 4-digit hexadecimal number
.Ar num Ns .
.It Cm \eU Ns Ar num
Bytes encoding, in UTF-8, the 8-digit hexadecimal number
.Ar num Ns .
.El
.Pp
A number literal is a valid sequence of characters beginning with
either a decimal digit,
or a plus character (+) followed by a decimal digit,
or a minus character (-) followed by a decimal digit.
A delimiter character must occur after a number literal.
There are two forms of number literals;
a number literal can be either an integer literal or a real literal.
.Bl -bullet -width Ds
.It
An integer literal has a zero character (0) as first decimal digit.
This zero is followed by either:
"B" or "b", and zero or more binary digits; or
"O" or "o", and zero or more octal digits; or
"D" or "d", and zero or more decimal digits; or
"X" or "x", and zero or more hexadecimal digits.
A integer literal may be suffixed by the character "E", "e", "I" or "i".
.It
A real literal consists of an integer part,
a decimal point,
a fraction part,
an "e" or "E" character,
an optionally signed integer exponent,
and an optional suffix (one of "E", "e", "I" or "i").
.El
.Pp
An identifier is any sequence of non-delimiter characters that does not form another type of token.
A delimiter character must occur after an identifier.
Different from certain versions of the Scheme programming language
(which have case-insensitive identifiers);
in the
.Nm
programming language, identifiers are case-sensitive.
.Ss Expressions
A well-formed expression (or just "expression" for short)
is one of the following, and nothing more:
.Bl -bullet -width Ds
.It
An identifier token.
.It
A string literal token.
.It
A number literal token.
.It
An open square bracket token;
followed by any number of expressions
followed by a close square bracket token;.
.It
An open parenthesis token;
followed by any number of expressions,
each one optionally followed by a single dot token;
followed by a close parenthesis token.
.El
.Sh DATA TYPES
A
.Em data type
can be interpreted as a set of possible objects.
Each object belong to at least one type.
Data types can overlap, and objects can belong to two or more types.
A
.Em primitive data type
is a basic data type that is built into
.Nm
and from which all other data types are constructed.
Primitive data types are
.Em disjoint
and do not overlap
(that is, each object belongs to one and only one primitive data type).
.Pp
.Nm
(like in most Lisps)
is a dynamically typed programming language.
Types are associated with objects
rather than with variables.
(Statically typed languages, by contrast, associate types with variables and expressions as well as with values).
Object are self-typing;
the primitive type of each object is implicit in the object itself.
.Pp
For each primitive data type (and a few other non-primitve ones),
the standard library defines a set of variables bound to objects
(constants, predicates, constructors, mutators, and accessors)
used to manipulate objects of that data type (see
.Sx STANDARD LIBRARY Ns ).
.Ss Numbers
[TODO: fixnums, bignums, numerical tower, etc]
.Ss Booleans
The boolean data type contains only two distinct unique objects: the true and false objects.
These objects have no read external representation, therefore they cannot be created by the
.Ic read
procedure.
They have, however, the printed external representations "#<true>" and "#<false>".
.Pp
Boolean objects (or "booleans" for short) can be used to control the evaluation of conditional procedures.
The procedures in the
.Sx STANDARD LIBRARY
interpret the false boolean object as a logical false, and any other object (including the true boolean object) as a logical true.
.Pp
A boolean is immutable and self-evaluating.
.Ss Symbols
The symbol data type contains objects holding an interned string of characters.
Symbol objects have identifiers as external representations.
Two symbol objects with the same external representation (either read or printed) are the same object
(they denote the same location in memory).
.Pp
Symbol objects (or "symbols" for short) are used to represent identifiers in programs.
The printed external representation of a symbol is called the
.Em name
of the symbol.
.Pp
A symbol is immutable and evaluates to the value bound to the variable with the same name as the symbol in the current environment.
.Ss End-of-file
The end-of-file data type contains a single object, called the end-of-file.
The end-of-file object has no read external representation.
It has, however, the printed external representation "#<eof>".
.Pp
The end-of-file object (or "eof" for short) is used to represent the end of a read file or program.
.Pp
The eof is immutable and self-evaluating.
.Ss Port
The port data type contains objects representing input and output devices.
A port object has no read external representation.
The printed external representation of a port is unique for a port object, but unpredictable.
.Pp
Port objects (or "ports", for short) can be input ports, used to read bytes from files or bytevectors;
or output ports, used to write bytes into files or bytevectors.
Ports can be closed.
When a port is closed, no further input/output operation is permited on that port.
Input/output operation can be buffered, and closing a port flushes the buffer.
.Pp
A port is immutable and self-evaluating.
.Ss Bytevectors
The bytevector data type (also known as "string" data type) contains objects denoting a sequence of zero or more locations in memory,
each one holding exactly a byte.
Where a
.Em byte
is an exact integer in the range from 0 to 255 inclusive.
A bytevector is typically more space-efficient than a vector containing the same values.
The external representation of bytevectors is a string literal.
.Pp
Bytevector objects (or "bytevectors" for short) are homogenous structures whose elements are indexed by integers and whose elements can be randomly accessed in constant time.
The
.Em length
of a bytevector is the number of elements that it contains.
This number is a non-negative integer that is fixed when the bytevector is created.
The
.Em valid indexes
of a bytevector are the exact non-negative integers less than the length of the bytevector,
starting at index zero.
.Pp
Bytevectors are usually used to hold string of characters encoded in UTF-8.
For example, "Hello World" and "Eĥoŝanĝo Ĉiuĵaŭde" are two strings of characters encoded in UTF-8 in a bytevector.
"\ex00\ex0A\ex05" is a bytevector of length 3 containing, in order, the bytes 0, 10 and 5 (or 0, A, and 5, in their hexadecimal form).
.Pp
A bytevector can be mutable or immutable, and is self-evaluating.
.Ss Vectors
The vector data type contains objects denoting a sequence of zero or more locations in memory,
each one holding an object of arbitrary type.
A vector object can have several different external representations (see below).
.Pp
Vector objects (or "vectors" for short) are heterogenous structures whose elements are indexed by integers and whose elements can be randomly accessed in constant time.
The
.Em length
of a vector is the number of elements that it contains.
This number is a non-negative integer that is fixed when the vector is created.
The
.Em valid indexes
of a vector are the exact non-negative integers less than the length of the vector.
The first element in a vector is indexed by zero, and the last element is indexed by one less than the length of the vector.
A vector can contain any object as its elements, even other vectors.
.Pp
A vector with zero element is called a
.Em nil Ns .
A vector with one element is called a
.Em box Ns .
A vector with two elements is called a
.Em pair Ns .
A vector with a number n of elements is called a
.Em n-tuple Ns .
.Pp
More complex data structures can be implemented in terms of vectors.
The most important of those derived data structures is the list.
A list is a chain of vectors
in which the last element of each vector is the next vector in the chain.
The vector chain goes on until a zero-element vector (also known as nil) or a non-vector object occurs as the last element of a vector in the chain.
A list in which the last element of the last chained vector is nil is called a
.Em proper list Ns .
A list in which the last element of the last chained vector is a non-vector object is called a
.Em improper list Ns .
A list in which all chained vectors are pairs is called a
.Em pair list Ns .
.Pp
Other data structures that can be implemented on top of vectors are hash tables, trees, assocition lists, and records (to name a few).
.Pp
There are two notations for the read external representation of a vector.
The most straight forward one uses square-braces around the elements of the vector.
For example, a vector of length 3 containing the number 0 in element zero, the vector with three number 2 in element one, and the string "Annna" in element 3 can be written as follows.
.Bd -literal -offset indent
[0 [2 2 2] "Annna"]
.Ed
.Pp
A list can be constructed using this notation by opening a new vector after the second-to-last element of the parent vector.
For example, the following is a proper pair list containing the same elements as the vector in the paragraph above, and in the same order.
.Bd -literal -offset indent
[0 [[2 2 2] ["Annna" []]]]
.Ed
.Pp
The second notation is optimized for the construction of lists.
This notation uses parentheses around the elements of the list.
When a list is constructed using this notation a new vector is created after each object, if there is no dot token after that object.
For example, the proper pair list above can be represented as follows:
.Bd -literal -offset indent
(0 [2 2 2] "Annna")
.Ed
.Pp
When a dot token is placed after the external representation of an object,
it inhibits the creation of a new vector, and instead, places the next element right after the current object.
For example, in the list "(0 . 1 2)", the object 1 occurs right after 0 in the same vector;
therefore, this external representation is equivalent as "[a b [c []]]".
.Pp
Placing a dot token after the last object in a list inhibits the creation of the last, empty vector.
For example the external representation "(a b . c .)" is equivalent to "[a [b c]]".
.Pp
There is a pictorial representation of vectors called
.Em box-and-pointer
notation,
in which a vector is a sequence of boxes representing the elements of the vector,
and pointers (arrows) from each box points to the object in that box.
A nil (zero-element vector) is represented in a special way, it is just a slash inside the box.
.Pp
For example the proper pair list "(a b c)",
also represented as "[a [b [c []]]]" in the square-braces notation,
can be represented pictorially as follows:
.Bd -literal -offset indent
┌───┬───┐    ┌───┬───┐    ┌───┬───┐
│ ╷ │ ╶─┼───>│ ╷ │ ╶─┼───>│ ╷ │ ╱ │
└─┼─┴───┘    └─┼─┴───┘    └─┼─┴───┘
  V            V            V
  a            b            c
.Ed
The proper list of 3-tuples "(a . b c . d)",
also represented as "[a b [c d []]]",
is represented pictorially in the box-and-pointer notation as follows:
.Bd -literal -offset indent
┌───┬───┬───┐    ┌───┬───┬───┐
│ ╷ │ ╷ │ ╶─┼───>│ ╷ │ ╷ │ ╱ │
└─┼─┴─┼─┴───┘    └─┼─┴─┼─┴───┘
  V   V            V   V
  a   b            c   d
.Ed
.Pp
The list "(0 [2 2 2] "Annna")" is represented pictorially as follows:
.Bd -literal -offset indent
┌───┬───┐    ┌───┬───┐    ┌───┬───┐
│ ╷ │ ╶─┼───>│ ╷ │ ╶─┼───>│ ╷ │ ╱ │
└─┼─┴───┘    └─┼─┴───┘    └─┼─┴───┘
  V            │            V
  a            V            e
         ┌───┬───┬───┐
         │ ╷ │ ╷ │ ╷ │
         └─┼─┴─┼─┴─┼─┘
           V   V   V
           b   c   d
.Ed
.Pp
Although a vector can have several read external representations,
the cannonical printed external representation uses solely the parenthetical notation.
For example, the structure "(0 [2 2 2] "Annna")" from the previous paragraph has the following printed external representation:
.Bd -literal -offset indent
(0 (2 . 2 . 2 .) "Annna")
.Ed
.Pp
A vector can be mutable or immutable.
A vector can only be evaluated when forming a proper pair list.
Evaluating a vector that does not form a proper pair list is an error.
.Sh STANDARD LIBRARY
[TODO]
.Sh FORMAL SYNTAX
This section provides a formal syntax for
.Nm
written in an extended Backus-Naur form (BNF).
Nonterminals are written between angle braces (⟨...⟩).
A terminal symbol is written between double quotation marks ("...").
.Pp
The following extensions to BNF are used to make the description more consise:
"⟨thing⟩*" means zero or more occurrences of "⟨thing⟩"; and
"⟨thing⟩+" means one or more occurrences of "⟨thing⟩".
"⟨thing⟩?" means zero or one occurrence of "⟨thing⟩".
.Pp
The BNF is augmented with the concepts of character classes and character ranges.
A
.Em character class
is expressed between square braces and colons ([:...:]) and denotes a named set of characters.
A
.Em character range
is a set of characters and/or character classes between square braces and denotes any character in the set or in the classes.
For example, "[abc[:delimiter:]]" means a "a", or "b", or "c" character, or a character in the "[:delimiter:]" class.
.Pp
The "-" character has the same special meaning in a character range it has in ERE.
"[0-9]" is the same as "[0123456789]".
.Pp
The "^" character has the same special meaning in a character range it has in ERE.
"[^abc]" means any character but "a", "b", or "c".
.Pp
A "[" may occur anywhere in a character range.
A "]" may occur only as the first character in a character range
.Pp
The alphabet for this grammar is all the 256 bytes that can be read from a file augmented with the end-of-file indicator.
.Pp
Unprintable and hard-to-type characters are represented in the same escape notation used in string literals
(for example, "\en" is a newline).
The end-of-file indicator, in special, is represented by the special class "[:eof:]"
.Ss Character classes
.Bd -literal -offset indent
[:space:]           ← [ \ef\en\er\et\ev]
[:binary:]          ← [0-1]
[:octal:]           ← [0-7]
[:decimal:]         ← [0-9]
[:hexadecimal:]     ← [0-9A-Fa-f]
[:delimiter:]       ← [][()#[:eof:][:space:]]
.Ed
.Ss Lexical structure
.Bd -literal -offset indent
⟨token⟩             ← [:eof:]
                    | ⟨left-paren⟩
                    | ⟨left-brace⟩
                    | ⟨right-paren⟩
                    | ⟨right-brace⟩
                    | ⟨dot⟩
                    | ⟨identifier⟩
                    | ⟨string-literal⟩
                    | ⟨number-literal⟩
.Ed
.Pp
.Bd -literal -offset indent
⟨left-paren⟩        ← "("
⟨left-brace⟩        ← "["
⟨right-paren⟩       ← ")"
⟨right-brace⟩       ← "]"
⟨dot⟩               ← "."
.Ed
.Pp
An identifier is a sequence of non-delimiter characters.
In addition to not containing delimiters;
an idenfier must begin with either
a plus sign followed by a non decimal digit;
a minus sign followed by a non decimal digit;
or any character other than the plus sign, the minus sign, the dot, or a decimal digit.
.Bd -literal -offset indent
⟨identifier⟩        ← ⟨initial⟩ [^[:delimiter:]]*
⟨initial⟩           ← "+" [^[:decimal:][:delimiter:]]
                    | "-" [^[:decimal:][:delimiter:]]
                    | [^+-.[:decimal:][:delimiter:]]
.Ed
.Pp
A string literal is composed by zero or more string elements between double quotes.
A string element is any character other than a double quote or a backslash,
or an escaped double quote,
or an escaped backslash.
.Bd -literal -offset indent
⟨string-literal⟩    ← "\e\(dq" ⟨string-element⟩* "\e\(dq"
⟨string-element⟩    ← [^\e\e\(dq] | \e\(dq | \e\e
.Ed
.Pp
A number literal begins with a decimal digit optionally prefixed by a plus or minus sign,
and optionally suffixed by a exactness indicator.
.Bd -literal -offset indent
⟨number-literal⟩    ← ⟨signal⟩ ⟨number-body⟩ ⟨exactness⟩
⟨signal⟩            ← [+-]?
⟨exactness⟩         ← [EeIi]?
⟨number-body⟩       ← ⟨binary-literal⟩
                    | ⟨octal-literal⟩
                    | ⟨decimal-literal⟩
                    | ⟨hex-literal⟩
                    | ⟨real-literal⟩
⟨binary-literal⟩    ← 0 [bB] [[:binary:]]*
⟨octal-literal⟩     ← 0 [oO] [[:octal:]]*
⟨decimal-literal⟩   ← 0 [dD] [[:decimal:]]*
⟨hex-literal⟩       ← 0 [dD] [[:hexadecimal:]]*
⟨real-literal⟩      ← [[:decimal:]]+ ⟨fraction⟩? ⟨exponent⟩?
⟨fraction⟩          ← "." [[:decimal:]]*
⟨exponent⟩          ← ⟨signal⟩ [[:decimal:]]*
.Ed
.Ss Intertoken space
.Bd -literal -offset indent
⟨whitespace⟩        ← [[:space:]]
⟨comment⟩           ← "#" [^\en]* "\en"
⟨atmosphere⟩        ← ⟨whitespace⟩ | ⟨comment⟩
⟨intertoken-space⟩  ← ⟨atmosphere⟩*
.Ed
.Ss Read external representation
The following is a simplification of the syntax of a read external representation.
This syntax is not complete, because intertoken-space may occur on either side of any token
(but not within a token).
.Bd -literal -offset indent
⟨representation⟩   ← ⟨number⟩
                   | ⟨string⟩
                   | ⟨symbol⟩
                   | ⟨vector⟩
                   | ⟨list⟩
⟨number⟩           ← ⟨number-literal⟩
⟨string⟩           ← ⟨string-literal⟩
⟨symbol⟩           ← ⟨identifier⟩
⟨vector⟩           ← ⟨left-brace⟩ ⟨representation⟩* ⟨right-brace⟩
⟨list⟩             ← ⟨left-paren⟩ ⟨list-element⟩* ⟨right-paren⟩
⟨list-element⟩     ← ⟨representation⟩ | ⟨representation⟩ ⟨dot⟩
.Ed
.Pp
The definitions of read external representation of proper pair list is given below.
Note that all proper pair list is also a list.
.Bd -literal -offset indent
⟨properpair-list⟩  ← ⟨left-paren⟩ ⟨representation⟩ ⟨right-paren⟩
.Ed
.Ss Expression
.Bd -literal -offset indent
⟨expression⟩       ← ⟨variable⟩
                   | ⟨literal⟩
                   | ⟨application⟩
⟨variable⟩         ← ⟨symbol⟩
⟨literal⟩          ← ⟨number⟩ | ⟨string⟩
⟨application⟩      ← ⟨proper-pair-list⟩
.Ed
.Ss Program
.Bd -literal -offset indent
⟨program⟩          ← ⟨expression⟩*
.Ed
.Sh FORMAL SEMANTICS
I have no idea what a formal semantics is or does.
.Sh EXAMPLES
[TODO]
.Sh SEE ALSO
.Xr simp 1 ,
.Xr simp 3
.Rs
.%A Harold Abelson
.%A Gerald Jay Sussman
.%A Julie Sussman
.%B Structure and Interpretation of Computer Programms
.%I The MIT Press
.%D 1996
.Re
.Sh STANDARDS
The
.Nm
programming language is compliant with nothing, as it has not been
standardised yet.  It was influenced by the Scheme and Kernel LISP
dialects.
.Pp
The syntax for comments and number literals breaks the usual LISP
tradition, and are influenced by shell script comments and C constants,
respectively.
.Pp
Parts of this manual
(especially at the
.Sx DESCRIPTION
section)
were blatantly stolen from
.Rs
.%B Revised⁵ Report on the Algorithmic Language Scheme
.Re Ns .
.Sh HISTORY
The
.NM
programming language was developed as a personal playground for
programming language theory, motivated by the reading of the Wizard Book
(Abelson & Sussman).  It first appeared as a C library in 2022.
.Sh AUTHORS
The
.Nm
programming language was designed by
.An Lucas de Sena Aq Mt lucas@seninha.org .
.Sh BUGS
The
.Nm
programming language implemented in
.Xr simp 1
and
.Xr simp 3
is not complete, and may not conform to this manpage.
.Pp
This manual page is also not complete, as the language is only
informally specified, and may change significantly from one release to
the other.
.Pp
This manual uses the terms "string" and "bytevector" interchangeably,
as both refer to the same
.Nm
data structure.
Note that "string" and "string literal" refer to different concepts;
the former is a data type, while the latter is a token type.
.Pp
This manual avoids to use the word "character" to refer to the elements of a string.
This manual uses the word "character" to refer solely to the units that compose tokens read by the parser.
Strings in
.Nm
can possibly contain no valid character
(in the sense of a UTF-8 encoded codepoint).
This manual uses the term "byte" instead to refer to the elements of a string.
.Pp
There's no "character" data type,
either in the C sense of a "byte",
or in the sense of a UTF-8 encoded codepoint.
A single byte can be represented as a one-element string.
A UTF-8 encoded codepoint can be represented as a string containing the encoding bytes.
