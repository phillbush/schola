.Dd September 17, 2023
.Dt SIMP 1
.Os
.Sh NAME
.Nm simp
.Nd simplistic programming language
.Sh SYNOPSIS
.Nm simp
.Nm simp
.Op Fl i
.Fl e Ar string
.Op Ar arg ...
.Nm simp
.Op Fl i
.Fl p Ar string
.Op Ar arg ...
.Nm simp
.Op Fl i
.Ar file
.Op Ar arg ...
.Sh DESCRIPTION
The
.Nm
utility is an interpreter for
.Em Simp ,
a minimalist (yet expressive),
statically scoped,
dynamically typed,
properly tail-recursive,
general-purpose LISP-1 programming language
in which imperative, funcional and message-passing programming styles
(to name a few) may be conveniently expressed.
It reads expressions from a file, string, or standard input, and evaluates them
(possibly writing to standard output the result of the evaluation, if in the REPL mode).
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl e Ar string
Read expressions from
.Ar string
but do not write the resulting evaluation into standard output.
.It Fl i
Enter the interactive REPL mode after evaluating expressions from a string or file.
This flag is set by default if no argument is given.
.It Fl p Ar string
Read expressions from
.Ar string
and write the resulting evaluation into standard output.
.El
.Pp
In the first synopsis form, expressions are interpreted interactively in a REPL (read-eval-print loop).
Expressions are read from standard input (usually a terminal) and written to standard output.
.Pp
In the second synopsis form (with
.Fl e ) ,
expressions are read from
.Ar string
and the resulting evaluation is not written into standard output.
Unless the flag
.Fl i
is given, no interactive REPL occurs after evaluating the string.
.Pp
In the third synopsis form (with
.Fl p ) ,
expressions are read from
.Ar string
and the resulting evaluation is written into standard output.
Unless the flag
.Fl i
is given, no interactive REPL occurs after evaluating the string.
.Pp
In the fourth synopsis form (with an argument and neither
.Fl e
or
.Fl i ) ,
expressions are read from
.Ar file
and evaluated without outputing the result.
If
.Ar file
is an hyphen
.Pq "-" ,
read expressions from the standard input instead.
Unless the flag
.Fl i
is given, no interactive REPL occurs after evaluating the file.
.Pp
.Nm
(like most dialects of Lisp)
employs a fully parenthesized prefix notation for programs and other data known as
.Em S-expression
(or
.Dq sexp
for short).
However,
.Nm
implements S-expressions as
.Sy vectors
rather than cons cells (aka pairs).
In fact, it is the vector, not the pair, the primary mean
of data combination.
In
.Nm ,
lists can be implemented as a chain of vectors,
in which the last element of each vector is a pointer to the next vector.
.Sh LANGUAGE
A
.Nm
program is a sequence of expressions, possibly alternated with comments and whitespace.
The kind of value that an expression returns is specified below after the
.Em "⇒" symbol.
An expression can be a special form, a symbol, a literal or a combination.
The initial
.Nm
syntax environment starts out with a few builtin syntactical forms;
and its regular environment starts out with a number of variables bound to builtin procedures.
They are listed below.
.Pp
.Nm
(like most Lisps)
is a dynamically typed programming language.
Types are associated with objects rather than with variables.
(Statically typed languages, by contrast,
associate types with variables and expressions as well with values).
Objects are self-typing;
the primitive data type of each object is implicit in the object itself.
Primitive data types are list below,
together with the builtin procedures that manipulate them.
.Pp
.Nm
is a statically scoped language with block structure.
To each place where an identifier is bound in a program there corresponds a
.Em region
of the program text within which the binding is visible.
Every mention of an identifier refers to the binding of the identifier
that established the innermost of the regions containing the use.
.Pp
Expressions can be evaluated, yielding a value.
An expression can evaluate to itself (a so called
.Em self-evaluating
expression).
An evaluation can do more than just compute things,
such as mutate an object, or perform input/output.
Such additional processes are called
.Em "side effects" .
An expression can also signal an error,
in which case the evaluation algorithm is interrupted,
even when at a deep level of recursion.
.Ss Syntax Sugars
.Bl -tag -width Ds -compact
.It Ic "\e\)" Ns Ar OBJECT "⇒" OBJECT
Any object prefixed with a backslash is equivalent to quoting the object.
For example,
.Ic "\e()"
is expanded to the special form
.Ic "(quote ())"
while parsing, which evaluates to the empty vector
.Ic "()" .
.It Ic "?\)" Ns Ar OBJECT "⇒" OBJECT
Any object prefixed with a dollar sign is equivalent to quasi-quoting the object.
For example,
.Ic "?(a b c d)"
is expanded to the special form
.Ic "(quasiquote (a b c d))"
while parsing, which evaluates to the inner vector
.Ic "(a b c d)" .
.It Ic "!\)" Ns Ar OBJECT "⇒" OBJECT
Any object prefixed with an exclamation point is equivalent to unquoting the object.
Unquoting should only occur inside a quasi-quotation.
For example,
.Ic "?(a b !two d)"
is expanded to the special form
.Ic "(quasiquote (a b (unquote two) d))"
while parsing, which evaluates to the inner vector,
except that the symbol
.Ic two
is evaluated with the value
.Ic 2
(supposing it is bound to that number in the current environment); that is,
.Ic "(a b 2 d)" .
.It Ic "@\)" Ns Ar OBJECT "⇒" OBJECT
Any object prefixed with an at sign is equivalent to splicing the object.
Splicing should only occur inside a quasi-quotation.
For example,
.Ic "?(a @(b c) d)"
is expanded to the special form
.Ic "(quasiquote (a (splice (b c)) d))"
while parsing, which evaluates to the quasi-quoted vector
expanded with the contents of the spliced vector; that is,
.Ic "(a b c d)" .
.El
.Ss Non-vector Forms
.Bl -tag -width Ds -compact
.It Ar SYMBOL "⇒" OBJECT
Return the value that the given symbol is bound to in the current environment.
.Ar SYMBOL
must be a symbol already bound in the current environment;
otherwise an error is signaled.
.It Ar LITERAL "⇒" OBJECT
Return the given literal expression.
.Ar LITERAL
can be any expression, except a symbol or a vector.
.El
.Ss Special Forms
.Bl -tag -width Ds -compact
.It Ic ( and Ar EXPRESSION ... ) "⇒" OBJECT
Evaluate each expression in turn and return false when one evaluate to false;
return a true value otherwise.
.It Ic ( define Ar SYMBOL EXPRESSION ) "⇒" VOID
Bind the given symbol to the given expression in the current environment.
.It Ic ( defmacro Ar SYMBOL SYMBOL ... [ ELLIPSIS ] Ar EXPRESSION ) "⇒" VOID
Bind, in the current syntax environment, the first given symbol to the
closure in which the given following symbls are bound to the actual
arguments in the given body expression.
If the ellipsis auxiliary syntax (that is,
.Ic "\)...\)" )
is given, the macro is variadic.
.It Ic ( defun Ar SYMBOL SYMBOL ... [ ELLIPSIS ] Ar EXPRESSION ) "⇒" VOID
Bind, in the current evaluation environment, the given first symbol to
the closure in which the given following symbols are bound to the actual
arguments in the given body expression.
If the ellipsis auxiliary syntax (that is,
.Ic "\)...\)" )
is given, the procedure is variadic.
This is a combination of the
.Ic define
and
.Ic lambda
syntactical forms.
.It Ic ( do Ar EXPRESSION ... ) "⇒" OBJECT
Evaluate each given expression and return the result of the last evaluation.
.It Ic ( false )
Return the false boolean constant.
.It Ic ( if Ar CONDITION ... THEN ... Ar [ELSE] ) "⇒" OBJECT
Evaluate each
.Ar CONDITION
expression in turn and, if it returns a true value, return the immediatelly following
.Ar THEN
expression.
If all condition-then pairs have been tested, return the optional
.Ar ELSE
condition, if it exists.
.It Ic ( lambda Ar SYMBOL ... [ ELLIPSIS ] EXPRESSION ) "⇒" PROCEDURE
Return a closure in which the given symbols are bound to the actual arguments in the given body expression.
If the ellipsis auxiliary syntax (that is,
.Ic "\)...\)" )
is given, the procedure is variadic,
and the last symbol is bound to a vector containing the remaining actual arguments.
.It Ic ( let Ar [SYMBOL EXPRESSION] ... EXPRESSION ) "⇒" OBJECT
Evaluate the final given expression in an environment in which each given symbol is
bound to the given expression after it.
.It Ic ( or Ar EXPRESSION ... ) "⇒" OBJECT
Evaluate each expression in turn and return true when one evaluate to true;
return a false value otherwise.
.It Ic ( quasiquote Ar EXPRESSION ) "⇒" OBJECT
Return the given expression itself, without evaluating it,
except that inner elements can be evaluated when unquoted,
and inner vectors can be spliced.
.It Ic ( quote Ar EXPRESSION ) "⇒" OBJECT
Return the given expression itself, without evaluating it.
.It Ic ( redefine Ar SYMBOL OBJECT ) "⇒" VOID
Rebound the given symbol to the given object in the current environment.
It is an error if the symbol is not already bound in the current environment.
.It Ic ( splice Ar VECTOR ) "⇒" OBJECT
Splice the given vector inside a quasi-quotation.
.It Ic ( true ) Ar "⇒" TRUE
Return the true boolean constant.
.It Ic ( unquote Ar EXPRESSION ) "⇒" OBJECT
Evaluate the given expression inside a quasi-quotation.
.El
.Ss Environments
Evaluation is subject to the current environment
(or the enviroment given to the
.Ic eval
special form).
.Pp
An identifier may name a location in memory where a value can be stored.
Such identifier is called a
.Em variable
and is said to be
.Em bound
to that location.
The set of all visible bindings in effect at some point in a program is known as the
.Em environment
in effect at that point.
The value stored in the location to which a variable is bound is called the variable's
.Em value .
By abuse of terminology, the variable is sometimes said to name the value or to be bound to the value.
This is not quite accurate, but confusion rarely results from this practice.
.Pp
An environment is made of two sub-environments:
The syntax environment, in which macros are defined;
and the evaluation environment, in which objects are defined.
A variable binding is first checked in the syntax environment,
and then on the evaluation environment.
.Pp
An environment is a sequence of
.Em frames .
Each frame is a table (possible empty) of
.Em bindings ,
which associate variable names with their corresponding location in memory.
Frames are structured in a singly linked list:
each frame can point to either nothing or to a parent tree.
The
.Em "value of a variable"
with respect to an environment is the value on the location given by the binding of the variable
in the first frame in the environment that contains a binding for that variable.
If no frame in the sequence specifies a binding for the variable,
then the variable is said to be
.Em unbound
in the environment.
.Bl -tag -width Ds -compact
.It Ic ( environment Ar ENVIRONMENT ) "⇒" ENVIRONMENT
Return a newly allocated environment using the given environment as parent environment.
.It Ic ( environment-current ) Ar "⇒" ENVIRONMENT
Return the current environment active at the point of evaluation this procedure is called.
.It Ic ( environment-empty ) Ar "⇒" ENVIRONMENT
Return the empty environment.
.It Ic ( environment?\) Ar OBJECT ) "⇒" BOOLEAN
Return whether the given object is an environment object.
.It Ic ( eval Ar OBJECT ENVIRONMENT ) "⇒" OBJECT
Evaluate the given object in the given environment and return the result of the evaluation.
.El
.Ss Values
There are two means of comparing objects.
Two objects are the
.Em same
if they are bound to the same thing or location.
Two objects are
.Em equivalent
if the values stored in their locations are equivalent by some predicate.
.Pp
The notation
.Ic "(+ 2 6) ⇒ 8"
means that the expression
.Ic "(+ 2 6)"
evaluates to the value represented by
.Ic "8" .
The notation
.Ic "(+ 2 6) ≡ (+ 4 4)"
means that both expressions
.Ic "(+ 2 6)"
and
.Ic "(+ 4 4)"
evaluate to the same value.
.Bl -tag -width Ds -compact
.It Ic ( same?\) Ar OBJECT ... ) "⇒" BOOLEAN
Return whether the given objects are the same.
.El
.Ss Numbers
Numbers are self-evaluating objects that represent an integer or real value.
.Nm
currently only implements fixed-size integer and double-sized floating point data types.
The procedures below only apply to integers.
The external representation of a number is a number literal.
.Bl -tag -width Ds -compact
.It Ic ( "+" Ar NUMBER ... ) "⇒" NUMBER
Return the sum of the given numbers.
.It Ic ( "*" Ar NUMBER ... ) "⇒" NUMBER
Return the product of the given numbers.
.It Ic ( "-" Ar NUMBER NUMBER ... ) "⇒" NUMBER
Return the difference of the given numbers.
.It Ic ( "/" Ar NUMBER NUMBER ... ) "⇒" NUMBER
Return the ratio of the given numbers.
.It Ic ( "=" Ar NUMBER ... ) "⇒" BOOLEAN
Return whether the given numbers are equal.
.It Ic ( "<" Ar NUMBER ... ) "⇒" BOOLEAN
Return whether the given numbers are monotonically increasing.
.It Ic ( ">" Ar NUMBER ... ) "⇒" BOOLEAN
Return whether the given numbers are monotonically decreasing.
.It Ic ( "<=" Ar NUMBER ... ) "⇒" BOOLEAN
Return whether the given numbers are monotonically nondecreasing.
.It Ic ( ">=" Ar NUMBER ... ) "⇒" BOOLEAN
Return whether the given numbers are monotonically nonincreasing.
.It Ic ( abs Ar NUMBER ) "⇒" NUMBER
Return the absolute, non negative, value of the given number.
.It Ic ( number?\) Ar OBJECT ) "⇒" BOOLEAN
Return whether the given object is a number.
.El
.Ss Symbols
Symbols are non-self-evaluating objects holding an interned string of characters.
A symbol evaluates to the value bound to its homonymous variable in the current environment.
The external representation of a symbol is an identifier.
.Bl -tag -width Ds -compact
.It Ic ( symbol?\) Ar OBJECT ) "⇒" BOOLEAN
Return whether the given object is a symbol object.
.El
.Ss Booleans
Boolean are one of two distinct unique self-evaluating objects: the true and false objects.
These objects have no read external representation (therefore they cannot be created by the
.Ic read
procedure).
.Pp
Booleans can be used to control the evaluation of conditional procedures.
.Nm
interprets the false boolean object as a logical false, and any other
object (including the true boolean object itself) as a logical true.
.Bl -tag -width Ds -compact
.It Ic ( boolean?\) Ar OBJECT ) "⇒" BOOLEAN
Return whether the given object is a boolean object.
.It Ic ( false?\) Ar OBJECT ) "⇒" BOOLEAN
Return whether the given object is the false object.
.It Ic ( not Ar OBJECT ) "⇒" BOOLEAN
Return the true object if the given object is the false object.
Return the false object otherwise.
.It Ic ( true?\) Ar OBJECT ) "⇒" BOOLEAN
Return whether the given object is not the false object.
.El
.Ss Bytes
Bytes are self-evaluating objects representing an integer in the range from 0 to 255 inclusive.
The external representation of a byte is a character literal.
.Bl -tag -width Ds -compact
.It Ic ( byte?\) Ar OBJECT ) "⇒" BOOLEAN
Return whether the given object is a byte object.
.El
.Ss Strings
Strings (or bytevectors) are self-evaluating objects bound to a
homogeneous sequence of zero or more locations in memory,
each one holding exactly a byte and indexed from zero.
A
.Em byte
is an exact integer in the range from 0 to 255 inclusive.
A string is typically more space-efficient than a vector containing the same values.
The external representation of a string is a string literal.
.Bl -tag -width Ds -compact
.It Ic ( empty?\) Ar OBJECT ) "⇒" BOOLEAN
Return whether the given object is the string object with zero elements.
.It Ic ( string Ar BYTE ... ) "⇒" STRING
Return a newly allocated string containing the given bytes.
.It Ic ( string-<?\) Ar STRING STRING ... ) "⇒" BOOLEAN
Return whether the given strings are lexicographically sorted in increasing order.
.It Ic ( string->?\) Ar STRING STRING ... ) "⇒" BOOLEAN
Return whether the given strings are lexicographically sorted in decreasing order.
.It Ic ( string-<=?\) Ar STRING STRING ... ) "⇒" BOOLEAN
Return whether the given strings are lexicographically sorted in nondecreasing order.
.It Ic ( string->=?\) Ar STRING STRING ... ) "⇒" BOOLEAN
Return whether the given strings are lexicographically sorted in nonincreasing order.
.It Ic ( string-concat Ar STRING ... ) "⇒" STRING
Return a newly allocated string whose elements form the concatenation of the given strings.
.It Ic ( string-copy!\) Ar STRING STRING ) "⇒" VOID
Copy all elements of the second string into the first one.
The length of the second string must be lesser or equal to the first's, or an error will be signaled
.It Ic ( string-clone Ar STRING ) "⇒" STRING
Return a newly allocated string with size and elements the same as the given string.
.It Ic ( string-length Ar STRING ) "⇒" NUMBER
Return the number of elements of the given string.
.It Ic ( string-alloc Ar NUMBER ) "⇒" STRING
Return a newly allocated string of the given size filled with the zero byte.
.It Ic ( string-get Ar STRING NUMBER ) "⇒" BYTE
Return the i-th element of the given string.
.It Ic ( string-set!\) Ar STRING NUMBER BYTE ) "⇒" STRING
Set the i-th element of the given string to the given byte.
.It Ic ( string-slice Ar STRING [ NUMBER [ NUMBER ] ] ) "⇒" STRING
Return the given string indexed from the first given number (default 0)
with the second given number (default maximum possible) elements.
For example,
.Cm "(string-slice \(dqabcde\(dq 1 3)"
returns the string
.Cm \(dqbcd\(dq .
Both strings point to the same memory,
so changing an element in the resulting string
also changes the corresponding element in the original string.
.It Ic ( string?\) Ar OBJECT ) "⇒" BOOLEAN
Return whether the given object is a string object.
.El
.Ss Vectors
Vectors are non-self-evaluating objects bound to a heterogeneous sequence
of zero or more locations in memory,
each one holding exactly an object of arbitrary type, and indexed from zero.
The external representation of a number is a number literal.
.Pp
A vector with zero element is called a
.Em nil .
A vector with one element is called a
.Em box .
A vector with two elements is called a
.Em pair .
A vector with a number of n elements is called an
.Em n-uple .
.Pp
More complex data structures,
such as linked lists, hash tables, trees, and records (to name a few),
can be implemented in terms of vectors.
.Bl -tag -width Ds -compact
.It Ic ( alloc Ar NUMBER ) "⇒" VECTOR
Return a newly allocated vector of the given size filled with the null object.
.It Ic ( car Ar VECTOR ) "⇒" OBJECT
Return the first element of the given vector.
.Ic "(car v)"
is equivalent to
.Ic "(get v 0)" .
.It Ic ( cdr Ar VECTOR) "⇒" VECTOR
Return the given vector indexed from the second element.
.Ic "(cdr v)"
is equivalent to
.Ic "(slice v 1 (- (length v) 1))" .
.It Ic ( clone Ar VECTOR ) "⇒" VECTOR
Return a newly allocated vector with size and elements the same as the given vector.
.It Ic ( concat Ar VECTOR ... ) "⇒" VECTOR
Return a newly allocated vector whose elements form the concatenation of the given vectors.
.It Ic ( copy!\) Ar VECTOR VECTOR ) "⇒" VOID
Copy all elements of the second vector into the first one.
The length of the second vector must be lesser or equal to the first's.
.It Ic ( equiv?\) Ar VECTOR ... ) "⇒" BOOLEAN
Return whether the given vectors have the same length and the same elements.
.It Ic ( get Ar VECTOR NUMBER ) "⇒" OBJECT
Return the i-th element of the given vector.
.It Ic ( length Ar VECTOR ) "⇒" NUMBER
Return the number of elements of the given vector.
.It Ic ( member Ar PROCEDURE OBJECT VECTOR ) "⇒" OBJECT
If the given vector contains an object for which the given binary predicate procedure passes for the given object,
return the slice of the given vector starting from such object until the end;
return the false object otherwise.
For example,
.Ic "(member > 3 \e(0 2 4 6 8))"
returns the slice
.Ic "(4 6 8)",
which begins from the first object larger than 3.
.It Ic ( null?\) Ar OBJECT ) "⇒" BOOLEAN
Return whether the given object is the vector object with zero elements.
.It Ic ( reverse Ar VECTOR ) "⇒" VECTOR
Return a newly allocated vector with the same size and elements as the given vector, but in reverse order.
.It Ic ( reverse!\) Ar VECTOR ) "⇒" VECTOR
Reverse the elements of the given vector in place, and return it.
.It Ic ( set!\) Ar VECTOR NUMBER OBJECT ) "⇒" VECTOR
Set the i-th element of the given vector to the given object.
.It Ic ( slice Ar VECTOR [ NUMBER [ NUMBER ] ] ) "⇒" VECTOR
Return the given vector indexed from the first given number (default 0)
with the second given number (default maximum possible) elements.
For example,
.Cm "(slice (vector \(aqa\(aq \(aqb\(aq \(aqc\(aq \(aqd\(aq \(aqe\(aq) 1 3)"
returns the vector
.Cm "(\(aqb\(aq \(aqc\(aq \(aqd\(aq)" .
Both vectors point to the same memory,
so changing an element in the resulting vector
also changes the corresponding element in the original vector.
.It Ic ( string->vector Ar STRING ) "⇒" VECTOR
Return a newly allocated vector filled with the bytes of the given string.
.It Ic ( vector Ar OBJECT ... ) "⇒" VECTOR
Return a newly allocated vector containing the given objects.
.It Ic ( vector?\) Ar OBJECT ) "⇒" BOOLEAN
Return whether the given object is a vector object.
.El
.Ss Procedures
Procedures are self-evaluating objects that represent either a builtin procedure or
a closure created with the
.Ic lambda
syntactical form.
.Pp
Procedures can be curried.
That is, applying a binary procedure to a single argument
returns a new procedure expecting the remaining argument.
The variadic arguments of a variadic procedure cannot be curried.
.Bl -tag -width Ds -compact
.It Ic ( apply Ar PROCEDURE OBJECT ... VECTOR ) "⇒" OBJECT
Return the result of the application of the given
procedure to all the given objects and the objects in the given vector.
.It Ic ( for-each Ar PROCEDURE VECTOR VECTOR ... ) "⇒" VOID
Apply the given procedure element-wise to the elements of the given vectors, in order.
It is an error if the given procedure does not accept as many arguments as there are vectors.
The procedure
.Ic for-each
is like
.Ic map
but calls procedure for its side effects rather than for its value.
.It Ic ( map Ar PROCEDURE VECTOR VECTOR ... ) "⇒" VECTOR
Return the vector of results of applications of the given procedure
element-wise to the elements of the given vectors, in order.
It is an error if the given procedure does not accept as many arguments as there are vectors.
.It Ic ( string-for-each Ar PROCEDURE STRING STRING ... ) "⇒" VOID
Apply the given procedure element-wise to the bytes of the given strings, in order.
It is an error if the given procedure does not accept as many arguments as there are strings.
The procedure
.Ic string-for-each
is like
.Ic string-map
but calls procedure for its side effects rather than for its value.
.It Ic ( string-map Ar PROCEDURE STRING STRING ... ) "⇒" STRING
Return the string of results of applications of the given procedure
element-wise to the bytes of the given string, in order.
It is an error if the given procedure does not accept as many arguments as there are strings,
or if the procedure does not return a byte.
.It Ic ( procedure?\) Ar OBJECT ) "⇒" BOOLEAN
Return whether the given object is a procedure object.
.El
.Ss Ports
Ports are self-evaluating objects representing input or output devices.
A port object has no read external representation.
The printed external representation of a port is unique for each port object,
but unpredictable.
.Pp
Ports can be input or output ports;
and can be used to read/write bytes from/into files or strings.
Ports can be closed.
When a port is closed, no further input/output operation is permited on that port.
Input/output operation can be buffered, and closing a port flushes the buffer.
.Pp
Operations on ports are listed below.
.Bl -tag -width Ds -compact
.It Ic ( port?\) Ar OBJECT ) "⇒" BOOLEAN
Return whether the given object is a port object.
.It Ic ( stderr ) Ar "⇒" PORT
Return the standard error port.
.It Ic ( stdin ) Ar "⇒" PORT
Return the standard input port.
.It Ic ( stdout ) Ar "⇒" PORT
Return the standard output port.
.El
.Ss Input/Output
The
.Em "read external representation"
of an object is a representation of an object as a sequence of characters.
This representation is not necessarily unique;
and certain objects may have no read external representation at all.
For example, the integer 28 has the read external representations
.Qq Ic 28 ,
.Qq Ic +28 ,
and
.Qq Ic 0x1C ,
among others.
Closures and port objects, for example, have no read external representation.
The read external representation of an object is parsed by the
.Ic read
procedure.
.Pp
The
.Em "printed external representation"
of an object is a representation of an object as a sequence of characters.
This representation is unique;
and all objects have one.
For example, the printed external representation of the integer 28
is the sequence of characters
.Qq Ic 28 ,
and the printed external representation of a vector consisting of the integers 8 and 13
is the sequence of characters
.Qq Ic "(8 13)".
For most data types, an object's printed external representation
is also a valid read external representation for the object.
The printed external representation of an object is generated by the
.Ic write
procedure.
.Pp
The
.Em "pretty-printed external representation"
of an object is a representation of an object as a sequence of characters.
This representation is not necessarily unique;
and all objects have one.
The pretty-printed external representation is similar to the regular printed external representation,
except that it is not guaranteed that a pretty-printed external representation
for an object is a valid read external representation.
In other words, while the printed external representation of an object can be read by the interpreter,
the pretty-printed external representation of an object is made for user consumption.
The pretty-printed external representation of an object is generated by the
.Ic display
procedure.
.Bl -tag -width Ds -compact
.It Ic ( display Ar OBJECT [PORT] ) Ar "⇒" VOID
Write the given object into the given port (standard output, by default)
in user-readable form.
.It Ic ( eof?\) Ar OBJECT ) "⇒" BOOLEAN
Return whether the given object is the end-of-file object.
.It Ic ( newline Ar [PORT] ) Ar "⇒" VOID
Write a newline into the given port (standard output, by default).
.It Ic ( read Ar [PORT] ) Ar "⇒" OBJECT
Read an object from the given port in its read external representation.
It returns false on read error and the end-of-object file when the port reached a end.
.It Ic ( write Ar OBJECT [PORT] ) Ar "⇒" VOID
Write the given object into the given port (standard output, by default)
in its printed external representation.
.El
.Sh FORMAL SYNTAX
This section provides a formal syntax for
.Nm
written in an extended Backus-Naur form (BNF).
Nonterminals are written between angle braces
.Pq Ic "<...>" .
A terminal symbol is written between double quotation marks
.Pq Ic "\(dq...\(dq" .
.Pp
The following extensions to BNF are used to make the description more consise:
.Bl -bullet
.It
.Ic "<thing>*"
means zero or more occurrences of
.Ic "<thing>" .
.It
.Ic "<thing>+"
means one or more occurrences of
.Ic "<thing>" .
.It
.Ic "<thing>?\)"
means zero or one occurrence of
.Ic "<thing>" .
.El
.Pp
The BNF is augmented with the concepts of character classes and character ranges.
A
.Em character class
is expressed between square braces and colons
.Pq Ic "[:...:]"
and denotes a named set of characters.
A
.Em character range
is a set of characters and/or character classes between square braces
.Pq Ic "[...]"
and denotes any character in the set or in the classes.
For example,
.Pq Ic "[abc[:delimiter:]]"
means an
.Ic "a" ,
or
.Ic "b" ,
or
.Ic "c"
character, or a character in the
.Ic "[:delimiter:]"
class.
The notion of character range is augmented as follows.
.Bl -bullet
.It
The
.Ic "-"
character has the same special meaning in a character range it has in ERE.
For example,
.Ic "[0-9]"
is the same as
.Ic "[0123456789]"
(which is the same as
.Ic "[:decimal:]" ) .
.It
The
.Ic "^"
character has the same special meaning in a character range it has in ERE.
For example,
.Ic "[^abc]"
means any character but
.Ic "a" ,
.Ic "b" ,
or
.Ic "c" .
.It
The opening bracket
.Ic "\)["
may occur anywhere in a character range.
.It
The closing bracket
.Ic "\)]"
may occur only as the first character in a character range
.El
.Pp
Unprintable and hard-to-type characters are represented in the same escape notation used in string literals.
For example,
.Ic "\en"
is the newline.
.Ss Alphabet
The alphabet for this grammar is all the 256 bytes that can be read from a file augmented with the end-of-file indicator.
.Pp
The character classes are defined as follows.
.Bd -literal -offset indent
[:space:]         ← [ \ef\en\er\et\ev]
[:binary:]        ← [0-1]
[:octal:]         ← [0-7]
[:decimal:]       ← [0-9]
[:hexadecimal:]   ← [0-9A-Fa-f]
[:delimiter:]     ← [][()#[:eof:][:space:]]
.Ed
.Pp
The end-of-file indicator, in special, is represented by the special class
.Ic "[:eof:]" .
.Pp
The backslash character
.Pq Ic "\e" ,
the double-quote character
.Pq Ic "\(dq" ,
and the single-quote character
.Pq Ic "\(aq" ,
which have special meanings and thus would need to be escaped,
are represented by the special classes
.Ic "[:slash:]" ,
.Ic "[:double-quote:]" ,
and
.Ic "[:single-quote:]" ,
respectively.
.Pp
The special character class
.Ic "[:anything:]"
represents any character in the alphabet.
.Ss Tokens
A
.Sy token
is the lexical element used to compose well formed expressions.
Some characters, known as
.Sy delimiters ,
have special meaning during the program parsing,
because certain tokens require a delimiter to occur after them.
A token is defined as follows:
.Bd -literal -offset indent
<token>           ← <end-of-file>
                  | <left-paren>
                  | <right-paren>
                  | <identifier>
                  | <char-literal>
                  | <string-literal>
                  | <number-literal>
.Ed
.Pp
The end-of-file is the token that terminates a program.
It is actually not a character, but is interpreted as if it were.
.Bd -literal -offset indent
<end-of-file>     ← [:eof:]
.Ed
.Pp
Single-character tokens are the following:
.Bd -literal -offset indent
<left-paren>      ← "("
<right-paren>     ← ")"
.Ed
A character literal is composed by one character element between single quotes.
A string literal is composed by zero or more character elements between double quotes.
A character element is any character other than a double quote or a backslash
or an escaped character.
Chracter literals and string literals are used to represent
characters and strings (alsow known as bytevectors) respectively.
The single and the double quotation mark characters that terminates a
character and a string are themselves delimiters.
.Bd -literal -offset indent
<char-literal>    ← [:single-quote:] <string-element> [:single-quote:]
<string-literal>  ← [:double-quote:] <string-element>* [:double-quote:]
<string-element>  ← [^[:double-quote:][:slash:]]
                  | [:slash:][:anything:]
.Ed
.Pp
A number literal begins with an optional signal and is followed by the number body.
A delimiter must occur after a numer literal.
.Bd -literal -offset indent
<number-literal>  ← <signal> <number-body>
<signal>          ← [+-]?
<number-body>     ← <binary-literal>
                  | <octal-literal>
                  | <decimal-literal>
                  | <hex-literal>
                  | <real-literal>
<binary-literal>  ← 0 [bB] [[:binary:]]*
<octal-literal>   ← 0 [oO] [[:octal:]]*
<decimal-literal> ← 0 [dD] [[:decimal:]]*
<hex-literal>     ← 0 [dD] [[:hexadecimal:]]*
<real-literal>    ← [[:decimal:]]+ <fraction>? <exponent>?
<fraction>        ← "." [[:decimal:]]*
<exponent>        ← <signal> [[:decimal:]]*
.Ed
.Pp
An identifier is any sequence of non-delimiter characters
that does not form another type of token.
A delimiter character must occur after an identifier.
.Bd -literal -offset indent
<identifier>      ← <initial> [^[:delimiter:]]*
<initial>         ← "+" [^[:decimal:][:delimiter:]]
                  | "-" [^[:decimal:][:delimiter:]]
                  | [^+-.[:decimal:][:delimiter:]]
.Ed
.Ss Escape sequences
Within a string literal, sequences of characters beginning with a backslash
.Pq Ic "\e"
are called
.Sy "escape sequences"
and represent bytes other than the characters themselves.
Most escape sequences represent a single byte,
but some forms may represent more than one byte.
An invalid escape sequence is equivalent to the character after the backslash;
for example, the string literal
.Dq Ic "\ej"
does not contain a valid escape sequence, so it is equivalent to
.Dq Ic "j" .
The valid escape sequences are as follows:
.Bl -tag -width Ds -compact
.It Ic \ea
Alarm (U+0007).
.It Ic \eb
Backspace (U+0008).
.It Ic \et
Horizontal tab (U+0009).
.It Ic \en
Line feed (U+000A).
.It Ic \ev
Vertical tab (U+000B).
.It Ic \ef
Form feed (U+000C).
.It Ic \er
Carriage return (U+000D).
.It Ic \ee
Escape character (U+001B).
.It Ic \e"
Double quote (U+0022).
.It Ic \e\e
Backslash (U+005C).
.It Ic "\e" Ns Ar num
Byte whose value is the 1-, 2-, or 3-digit octal number
.Ar num .
.It Ic "\ex" Ns Ar num
Byte whose value is the 1- or 2-digit hexadecimal number
.Ar num .
.It Ic "\eu" Ns Ar num
Bytes encoding, in UTF-8, the 4-digit hexadecimal number
.Ar num .
.It Ic "\eU" Ns Ar num
Bytes encoding, in UTF-8, the 8-digit hexadecimal number
.Ar num .
.El
.Ss Intertoken space
Tokens are separated by intertoken space, which includes both whitespace and comments.
Intertoken space is used for improved readability,
and as necessary to separate tokens from each other.
.Bd -literal -offset indent
<whitespace>      ← [[:space:]]
<comment>         ← "#" [^\en]* "\en"
<atmosphere>      ← <whitespace> | <comment>
<intertoken>      ← <atmosphere>*
.Ed
Whitespace can occur between any two tokens, but not within a token.
Whitespace occurring inside a string literal is significant.
.Pp
Comments are annotations in the source code and are treated exactly like whitespace.
A hash character
.Pq Ic "#"
outside a string literal indicates the start of a comment.
The comment continues to the end of the line on which the hash character appears.
.Ss Read external representation
The following is a simplification of the syntax of a read external representation.
This syntax is not complete, because intertoken-space may occur on either side of any token
(but not within a token).
.Bd -literal -offset indent
<representation>  ← <number>
                  | <string>
                  | <symbol>
                  | <vector>
<number>          ← <number-literal>
<byte>            ← <char-literal>
<string>          ← <string-literal>
<symbol>          ← <identifier>
<vector>          ← <left-paren> <representation>* <right-paren>
.Ed
.Ss Program
A
.Nm
program is a sequence of characters forming whitespace, comments, and tokens.
The tokens in a program must form syntactically well formed expressions.
.Bd -literal -offset indent
<program>         ← <expression>*
<expression>      ← <variable>
                  | <literal>
                  | <application>
<variable>        ← <symbol>
<literal>         ← <number> | <string>
<application>     ← <vector>
.Ed
.Sh FORMAL SEMANTICS
I have no idea what a formal semantics is or does.
.Sh EXAMPLES
[TODO]
.Sh SEE ALSO
.Rs
.%A Harold Abelson
.%A Gerald Jay Sussman
.%A Julie Sussman
.%B Structure and Interpretation of Computer Programms
.%I The MIT Press
.%D 1996
.Re
.Sh STANDARDS
The
.Nm
programming language is compliant with nothing, as it has not been standardised.
It was influenced by the Scheme LISP dialect.
.Pp
The syntax for comments and number literals breaks the usual LISP tradition,
and are influenced by shell script comments and C constants, respectively.
.Pp
Parts of this manual (especially at the
.Sx DESCRIPTION
section) were blatantly stolen from
.Rs
.%B Revised⁵ Report on the Algorithmic Language Scheme
.Re
.Sh HISTORY
The
.Nm
programming language was developed as a personal playground for
programming language theory, motivated by the reading of the Wizard Book
(Abelson & Sussman).  It first appeared as a C implementation in 2022.
.Sh AUTHORS
The
.Nm
programming language was designed by
.An Lucas de Sena Aq Mt "lucas AT seninha DOT org" .
.Sh BUGS
The
.Nm
programming language implemented in
.Nm
is not complete, and may not conform to this manpage.
.Pp
This manual page is also not complete, as the language is only
informally specified, and may change significantly from one release to
the other.
.Pp
This manual uses the terms "string" and "bytevector" interchangeably,
as both refer to the same
.Nm
data structure.
Note that "string" and "string literal" refer to different concepts;
the former is a data type, while the latter is a token type.
.Pp
This manual avoids to use the word "character" to refer to the elements of a string.
This manual uses the word "character" to refer solely to the units that compose tokens read by the parser.
Strings in
.Nm
can possibly contain no valid character
(in the sense of a UTF-8 encoded codepoint).
This manual uses the term "byte" instead to refer to the elements of a string.
.Pp
There's no "character" data type,
either in the C sense of a "byte",
or in the sense of a UTF-8 encoded codepoint.
A single byte can be represented as a one-element string.
A UTF-8 encoded codepoint can be represented as a string containing the encoding bytes.
